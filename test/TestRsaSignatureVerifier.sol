pragma solidity ^0.4.17;


import "../contracts/signatures/RsaSignatureVerifier.sol";
import "../contracts/utils/BytesUtils.sol";
import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";

contract TestRsaSignatureVerifier {

    RsaSignatureVerifier rsaSignatureVerifier;

    function beforeAll() public {
        rsaSignatureVerifier = new RsaSignatureVerifier();
    }

    function testVerifyRSASHA256Signature_Keysize2048() public {
        bytes memory signedMessage = "signed message";
        // privateKey = "188e41d702ecb84eee8bd4545079f1c202b030ef325431ef659fcaaf8d6427796e18570582df424acbbae86bd74c847797b281a308caa7e7f81c6f347a372881e1608939a7726c3ee806752f31856da8bb44cf4e2db0e3bb900275010e2e451bfe657476ca67e7a3c9d2a0b49cc7ac0484ae6b74f47fb0599d8abf51a017750f57597fa618bff1f7cfe86c0be4746f07fca554e95d8fca9c57b29251eda6958912534e6201cc7e18f3d921add16d0b565a7962fe3599ef4c8e7c6bcd1006264104cd0eefe1a338e66dfb726fd35f9b8d5d1a1e3c713a031c0232526c3321aafc2a10c505cedd146dfb1259bad5409de0de1be80fdfd56ab1cd6b7f523d8efe81"
        bytes memory publicKey = hex"a89ea4837430cc2b19d303a6dc8bf82a9b6b2cd4f4b7cc988ee453abab8d8ac5915252c5af03c955fedd902ae8d59cf8d0d8fb3691db1c2e59d08ef028a7730ba35d3321475a029c551e9c5e98e89696e0d1b7fac4f6cf9f897ef44ac2d33d6e9af823175c05a2534c598cbf57aa66e60dcfefc834e9993facdba6a2a3c1e895974d3dfbd8e5bd9573ffaf7d995d09a09ca6017f14d3a4186c1641d54185aeac7be09ae63d5c928a4e164747efc703a860ca8c78cb894418ec7c2842969ad08d5d2d7724df52a486156e8bd19a9dd0bdd829295ebacd6781b35465fa1c735b4564bd271ff9c38e2bd808ec5fca032ea2a0e78f469e737f15ed4ede863bec4929";
        bytes memory signature = hex"747b6a4842a62031af64de54cbbf9cb44db6df1a605aa86b217809ab2b7a6931d8c55c179febeecb516871506d0211c38e868344c4226fa99e10db81dbcbcc54b5f21d9f8b8daac0846e570560f019fa6b9a475593c0b0ed0720ef58275bd58ffbcf68fdccd21cdfc69823e09c60bad0e13ba278635ada9cfef5b798d4366c341359423b3c9ca03a99844362669b15a1ce2d280a95920f6c36c8ccd16c73f19c8ff3a2e2aadd255da4d9140c2284f50f93c69183cc6a4efbec71a00f7a5917c7605de1581af762f5ca5799c93053ca18c22d3b0253a999d905cc8b55fe5a0763de9a649a306b624b7b8340e41d3ffc180b3205886a3f0736d76f6f1c1ea75091";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), true, "message should be equal to the data recovered from signature");
    }

    function testVerifyRSASHA256Signature_Keysize3072() public {
        bytes memory signedMessage = "signed message";
        // privateKey = "101a52df98dcc90ea39d8a1d2ae28c5e5f99fc9fd9c511d706a5838be29717dfaa531e74eef128fb4560268379bb0395716a71be0123e18071589a5d167be45f31d0892e2a1b039d345d29467a3dde7e58fbfec41caaa5c1f945464fcd8d7a26a08e2a6131445bb289e6358a8d22592c0d082a257a28a40d785e10d717c772baa61f1edff06a8c453f1e352400dcc7cd340c01d32d286492daf2e04cc50af3a15520deee63f892a50d4771e6f9e7cd7aac74c57c2c5b7bd1e0652f762b4698f9ef0d6d16b722924dfd459a7beb5dd7ef07801da0082cd1cc4f19ade68b8800c6ba726cf10aed6b310de5ccb7e21980ccda17ff0ff4c8d6f6a5c19c269fe962dbe70a0e451678ad13504e7857e9d1a9b1feb60623cde894f519e57ac1c4f913db03665346b5ad883ef28f69c82fe3cab03436eb79db03d351c4ffb3a2e04d29914a1810a991814e3185c20ad1973d20faf5ca10c7753856aaaa61acf6122076d2e6aa3e35410c55a98775dc0dd64162bb0be5c314ff2ad90ba1557361dbdcd61";
        bytes memory publicKey = hex"9f51bcfb81b71ba635a6401ac8563b65df8cd6f342f90744f735929ad397e6e8965e546866e201b796b3c87ceaeadf3ea5b727e6c23cb37da2fa44db8cb6d5c3058e075ebc55dd123d9e3551c2550d752897cc0fe6997243fb5551337917cb9925e7b03502b01d54501b2fa496241bc3a40714508d87f832912438784b621b49ed355f30d2a5977d592d4dff9d17d519cf8176b16de57a404a6ca5b4c451570b780be7db02be1767e190a9fcbf06780e9b2fb044b579839bae08087a3b3cc36d7d65baa4048b4f72244f68e16daf6acef68237b412deea5d51da91c65cb854e31c2b51b90afe840f6ee66523a781c5e0d7de71fa4012f7426c923bb617ea8e19e26bd015b8a18b0dd6cef5b99d3a7a7aa144d8f5379799790b617b2fe673dc57807f751b1a701cc548fa80a6370062da1500a0433e7a53dcb0e9c5104d82a5b4eab0240958cbb3a7bd530ef9ef187c698e4743639ca889ed9068fe6a7fcaf09caae84a6d497dd269e29e123900b389227c91631c75c0d03c069db7c0966386f7";
        bytes memory signature = hex"25f65fc5196cfb345d7e2e68e99203a9f7fb65c4b7a38af8c6845f1ba2fbfe9c4f1075b5de0a5b1b25985cb1993233b9c54025e9638bd2be78ebe2c3839b1e0db8b53de40261ed70c967d51d844d177869bfcc68a8af936e460c7b80534da9fb805ce96246efaf7eeb86328ea402fd3edfc84e9e64742dcb0e47ea1061a979843003bfe84223bf438d45a9cba24007106be24e3e97e16f963733d391c5f443300e32c782bb2732162d4e70424304d0bc77116ae92c33cbd85ef9065daf62eb1c354cc088d34a11ce502ac87cb1976d5ba3edf332832f881c83ceb6c666ff49daf6c4f95ce4753fcf2713f46755690e5d6d13d08dfcf59765e75ea1e590275b970ab88aca24dfa606e90c761e5c64fa31ccb6b9492c1b7b766fbc4816f691c8731c9e9352518491ed32387a8c65c3cbba06012cf5adf9463e4f249eddac9ab50fdb40a53137d01cbe90f41043b9cca684f3369f21ed3f53ee2cc56a0f86b14fe0070fc311c162aff704e66627347bb5234dd6b604c8e85b32f2cdaa6dbf7e52c9";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), true, "message should be equal to the data recovered from signature");
    }

    function testVerifyRSASHA256Signature_Keysize4096() public {
        bytes memory signedMessage = "signed message";
        // privateKey = "5fd240bf2c56d0523d8a199feeb55987fe1b2382856ed21f86581e352280d89f991edf54d59ab7dbd989b4a1bbc0ebe119e8da38b766c1e00545e59308ccbde94697bf4da4f5c8787e06b2aac753e40102134c84d08124a6b6dd28c261de76938ca60d94e4631bfb13d75272d2471602a03a649a9e14803b7f56ad04f8eb6f2c2299cdb2474c645fc42b4148eb3f570f345b8c40e13881e0d1a65b37dd5f0ac3e890edbdd88b1717306078ebae816cbab1e9b60ec219058abdd4953c1e638aff7a1b8c2010d3c5016ec98e777e61b7930c3e8a5e95f017ee2f4ddff3629f53cd6e7e2008bfdd93c408fad256f6ea5b81e88077fa8253f211269e5e26e4d7f08ae56713714648d2a324d8635a862cca31673ccba443b1c4cc50d26a1912f2d8ac252e4f01bb072b0892818e51d297811ffa502e30365c9e89125e53969d91027e26b68907c0dfb55da84ee30e6fa52bd94da7f1cf1641963d0110b8d3acea56ad55dfc108bf402f07a1a40505828db2ca15e0183730d5d2a19f7e870d7b009d6e24f93e9efc558a4dd842c48bcc2c98c365a6c59e5b40eab0c1140c900ab4d89601cf38a32b17e799ec095cb6beb364b73460b2137c4487820f01bd7bf25ef41e53e14c53e54ea33794899ff487c86487cd9a995aac8f24710d3a3f485c48180b6bf18f6ad0c2ad2dddd5192e85458352fb2ba605f7e51f90129b990e7a1ca71"
        bytes memory publicKey = hex"9ab4d403836b0a73529e91c5ba8238b1574dcf257e2445eaf6c3c9981219997b519fb001241f2a04c05cec6536341dade6076469752633814e711572d249b441d1ca8e839bec1aee61dfd0af22cdebbfa8f1dd3d079b06681b7894bbc0d67ad0e59f7f36192d1b893b5923e2c45366aee9134dbacb85e473d68a8592a79bbff8d8c8e8294d63101eee692dd6816a113eefd264e25149fbebf11c6f9769fed726c4e6352b87c694f3d65fb7d3d9894dc645daeaa94592de04a9b87a001faeba7e91ad7f6ad7420799ce38b132d6486338a1f70f9f555bcfc17bc99b4d9d071a9e701445dee6ea0677db434671added127e2258a4fae27af1ae55b8d673f0f2b83c9fb2b6654c669e91d16c611375caaae3d1704e476adcdd5ad52356ff33adeb07f79116b42f791b957939d0b3c29d13fc72b0b389f0e6bc7eb80a47c574fca0c7a863b96ca6694857f99c1e94b107226914fef390fc14ec25b91259efc027c4e82addd5e0cf2bfc64e0a5a71e8eb2f66bdac26ea78208e835e9b2e594333993694cdf0138d4d6682d0e9d80a94bdf4af8ba81801b43c6c57a137a75525fc6f3b6b09a058b0a614c4999c5da6f829976cccfd545381c56f3d264ff23a9ea5da2da4327a374156923a8ab7c0dac01d192ad5f1684326e8a4fc49d515c2836e8311c22571fb38ec35f7b2942a59e0bd8fca0ef923e5d8cb006224c93f69a8fc3e1f";
        bytes memory signature = hex"045c6c03a390f7dd84b5576fb4aada37cf1234e90add6b36e51f119c79d9287ef85f8f1b193a0dcdf6bde353f4b9fee0561d92643f84bd0dfcd6c06573382389090fdbd67cf540970208dd3622a62bec3772d1a5fede954db00c08eccd212a3149afa08b57309f5311064686628b3f45da1e0d5b95e5ad6b215dad85804cd7fafce20e106a2396215bdb3ba86ed121c074e93a55b0bc9dd245e4fdb1efaa45f69bd3558238d52646d4b24fd73031ecc28269aa8a9ce85514fb4154be4c7046b237d027b419712f97cd9f7657f4b5f60739a4ca65f4eb1e601d936c6d50a83d2f55f053c1b47d9786cb6e768c8094aebfe40848d1395fdf278eed9ac09097cc527e4811901b0ec9ef6df142918f383718b5b8629a7f6d933474d6e9659857e2e2932e523f8b3fbe32f8011e91e2d62b7e45184137e0e56503bf99ede482814c5b8947e4fadf92f08d73e04846857066a34aaceeae70cb5b16281be101dc05a9b351a419d1db33daf916ac103e03a1c0ba90bef7e785c2e061c2f08aa30ba04321e84f7f4a0962b5a4ca1baa124b7e09048c8f1e924e516e876b59a955c4ad34d9364f0e1b5ffa2426c13afaa314cdc690836b3ff498a671ce8353657b4ef8450b72acb378e848e68eb662906f870242cab84db73d05abea4479f78954435096106677dfb2594c7778d6fa1f37f575c72777764703e57591a07dd83a52b858ecd6";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), true, "message should be equal to the data recovered from signature");
    }

    function testVerifyRSASHA256Signature_InvalidMessage() public {
        bytes memory signedMessage = "invalid message";
        bytes memory publicKey = hex"a89ea4837430cc2b19d303a6dc8bf82a9b6b2cd4f4b7cc988ee453abab8d8ac5915252c5af03c955fedd902ae8d59cf8d0d8fb3691db1c2e59d08ef028a7730ba35d3321475a029c551e9c5e98e89696e0d1b7fac4f6cf9f897ef44ac2d33d6e9af823175c05a2534c598cbf57aa66e60dcfefc834e9993facdba6a2a3c1e895974d3dfbd8e5bd9573ffaf7d995d09a09ca6017f14d3a4186c1641d54185aeac7be09ae63d5c928a4e164747efc703a860ca8c78cb894418ec7c2842969ad08d5d2d7724df52a486156e8bd19a9dd0bdd829295ebacd6781b35465fa1c735b4564bd271ff9c38e2bd808ec5fca032ea2a0e78f469e737f15ed4ede863bec4929";
        bytes memory signature = hex"747b6a4842a62031af64de54cbbf9cb44db6df1a605aa86b217809ab2b7a6931d8c55c179febeecb516871506d0211c38e868344c4226fa99e10db81dbcbcc54b5f21d9f8b8daac0846e570560f019fa6b9a475593c0b0ed0720ef58275bd58ffbcf68fdccd21cdfc69823e09c60bad0e13ba278635ada9cfef5b798d4366c341359423b3c9ca03a99844362669b15a1ce2d280a95920f6c36c8ccd16c73f19c8ff3a2e2aadd255da4d9140c2284f50f93c69183cc6a4efbec71a00f7a5917c7605de1581af762f5ca5799c93053ca18c22d3b0253a999d905cc8b55fe5a0763de9a649a306b624b7b8340e41d3ffc180b3205886a3f0736d76f6f1c1ea75091";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), false, "message should not be equal to the data recovered from signature");
    }

    function testVerifyRSASHA256Signature_InvalidSignature() public {
        bytes memory signedMessage = "signed message";
        bytes memory publicKey = hex"a89ea4837430cc2b19d303a6dc8bf82a9b6b2cd4f4b7cc988ee453abab8d8ac5915252c5af03c955fedd902ae8d59cf8d0d8fb3691db1c2e59d08ef028a7730ba35d3321475a029c551e9c5e98e89696e0d1b7fac4f6cf9f897ef44ac2d33d6e9af823175c05a2534c598cbf57aa66e60dcfefc834e9993facdba6a2a3c1e895974d3dfbd8e5bd9573ffaf7d995d09a09ca6017f14d3a4186c1641d54185aeac7be09ae63d5c928a4e164747efc703a860ca8c78cb894418ec7c2842969ad08d5d2d7724df52a486156e8bd19a9dd0bdd829295ebacd6781b35465fa1c735b4564bd271ff9c38e2bd808ec5fca032ea2a0e78f469e737f15ed4ede863bec4929";
        bytes memory signature = hex"747b6a4842a62031af64de54cbbf9cb44db6df1a605aa86b217809ab2b7a6931d8c55c179febeecb516871506d0211c38e868344c4226fa99e10db81dbcbcc54b5f21d9f8b8daac0846e570560f019fa6b9a475593c0b0ed0720ef58275bd58ffbcf68fdccd21cdfc69823e09c60bad0e13ba278635ada9cfef5b798d4366c341359423b3c9ca03a99844362669b15a1ce2d280a95920f6c36c8ccd16c73f19c8ff3a2e2aadd255da4d9140c2284f50f93c69183cc6a4efbec71a00f7a5917c7605de1581af762f5ca5799c93053ca18c22d3b0253a999d905cc8b55fe5a0763de9a649a306b624b7b8340e41d3ffc180b3205886a3f0736d76f6f1c1ea75090";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), false, "message should not be equal to the data recovered from signature");
    }

    function testVerifyRSASHA256Signature_InvalidPublicKey() public {
        bytes memory signedMessage = "signed message";
        bytes memory publicKey = hex"a89ea4837430cc2b19d303a6dc8bf82a9b6b2cd4f4b7cc988ee453abab8d8ac5915252c5af03c955fedd902ae8d59cf8d0d8fb3691db1c2e59d08ef028a7730ba35d3321475a029c551e9c5e98e89696e0d1b7fac4f6cf9f897ef44ac2d33d6e9af823175c05a2534c598cbf57aa66e60dcfefc834e9993facdba6a2a3c1e895974d3dfbd8e5bd9573ffaf7d995d09a09ca6017f14d3a4186c1641d54185aeac7be09ae63d5c928a4e164747efc703a860ca8c78cb894418ec7c2842969ad08d5d2d7724df52a486156e8bd19a9dd0bdd829295ebacd6781b35465fa1c735b4564bd271ff9c38e2bd808ec5fca032ea2a0e78f469e737f15ed4ede863bec4920";
        bytes memory signature = hex"747b6a4842a62031af64de54cbbf9cb44db6df1a605aa86b217809ab2b7a6931d8c55c179febeecb516871506d0211c38e868344c4226fa99e10db81dbcbcc54b5f21d9f8b8daac0846e570560f019fa6b9a475593c0b0ed0720ef58275bd58ffbcf68fdccd21cdfc69823e09c60bad0e13ba278635ada9cfef5b798d4366c341359423b3c9ca03a99844362669b15a1ce2d280a95920f6c36c8ccd16c73f19c8ff3a2e2aadd255da4d9140c2284f50f93c69183cc6a4efbec71a00f7a5917c7605de1581af762f5ca5799c93053ca18c22d3b0253a999d905cc8b55fe5a0763de9a649a306b624b7b8340e41d3ffc180b3205886a3f0736d76f6f1c1ea75091";
        Assert.equal(rsaSignatureVerifier.verify(signedMessage, signature, publicKey), false, "message should not be equal to the data recovered from signature");
    }
}
